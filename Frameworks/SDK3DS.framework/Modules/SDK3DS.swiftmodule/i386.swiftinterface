// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 effective-4.2 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name SDK3DS
import AdSupport
import CommonCrypto
import DLRadioButton
import Foundation
@_exported import SDK3DS
import Security
import Swift
import UIKit
import WebKit
@objc @_inheritsConvenienceInitializers public class OOBFragment : UIKit.UIView {
  public func setListener(listener: SDK3DS.OOBListener)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable public class RoundedView : UIKit.UIView {
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_hasMissingDesignatedInitializers public class DeviceManager {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ProgressViewActivity : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
open class ThreeDS2ServiceImpl : SDK3DS.ThreeDS2Service {
  public var deviceParams: SDK3DS.SDKDeviceInfo?
  public var MainViewController: UIKit.UIViewController?
  public var initialized: Swift.Bool
  public var directoryServerID: Swift.String
  public var messageVersion: Swift.String?
  public static var uiCustomization: SDK3DS.UiCustomization?
  public var configParameters: SDK3DS.ConfigParameters?
  public var locale: Swift.String?
  public var warnings: [SDK3DS.Warning]?
  public var sdkAppID: Swift.String?
  public var sdkReferenceNumber: Swift.String?
  public static let sdk: SDK3DS.ThreeDS2ServiceImpl
  public init()
  public func initialize(uiViewController: UIKit.UIViewController, configParameters: SDK3DS.ConfigParameters, locale: Swift.String?, uiCustomization: SDK3DS.UiCustomization?) throws
  public func createTransaction(directoryServerID: Swift.String, messageVersion: Swift.String?) throws -> SDK3DS.Transaction
  public func cleanUp() throws
  public func getSDKVersion() throws -> Swift.String
  public func getWarnings() -> [SDK3DS.Warning]
  public func sendTestPOST()
  public func encodeJSONtest()
  @objc deinit
}
public protocol ChallengeStatusReceiver {
  func completed(_ e: SDK3DS.CompletionEvent)
  func cancelled()
  func timedout()
  func protocolError(_ e: SDK3DS.ProtocolErrorEvent)
  func runtimeError(_ e: SDK3DS.RuntimeErrorEvent)
}
open class RuntimeErrorEvent {
  public init(errorMessage: Swift.String)
  public init(errorCode: Swift.String, errorMessage: Swift.String)
  public func getErrorCode() -> Swift.String?
  public func getErrorMessage() -> Swift.String
  @objc deinit
}
open class Customization {
  public init()
  public func setTextFontName(fontName: Swift.String) throws
  public func setTextColor(hexColorCode: Swift.String) throws
  public func setTextFontSize(fontSize: Swift.Int) throws
  public func getTextFontName() -> Swift.String
  public func getTextColor() -> Swift.String
  public func getTextFontSize() -> Swift.Int
  @objc deinit
}
extension UIImageView {
}
public protocol HTMLListener {
  func callbackHTML(text: Swift.String)
  func refreshHTML()
}
public protocol TextListener {
  func callbackText(text: Swift.String)
}
open class ProtocolErrorEvent {
  public var ErrorMsg: SDK3DS.ErrorMessage
  public init(sdkTransactionID: Swift.String, errorMessage: SDK3DS.ErrorMessage)
  public func getErrorMessage() -> SDK3DS.ErrorMessage
  public func getSDKTransactionID() -> Swift.String
  @objc deinit
}
public enum ButtonType : Swift.Int, Swift.Codable {
  case VERIFY
  case CONTINUE
  case NEXT
  case CANCEL
  case RESEND
  case SUBMIT
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum AcsUiTypeEnum : Swift.String, Swift.Codable {
  case TEXT
  case SINGLE_SELECT
  case MULTI_SELECT
  case OOB
  case HTML
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
open class CompletionEvent {
  public var sdkTransactionID: Swift.String
  public var transactionStatus: Swift.String
  public init(sdkTransactionID: Swift.String, transactionStatus: Swift.String)
  public func getSDKTransactionID() -> Swift.String
  public func getTransactionStatus() -> Swift.String
  @objc deinit
}
open class ConfigParameters {
  public init()
  public func addParam(_ group: Swift.String?, _ paramName: Swift.String, _ paramValue: Swift.String?) throws
  public func getParamValue(_ group: Swift.String?, _ paramName: Swift.String) throws -> Swift.String
  public func removeParam(_ group: Swift.String?, _ paramName: Swift.String) throws -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ACSDataAuthentication : Swift.Codable {
  public func getAcsPublicKey() -> Foundation.Data
  public func getSdkPublicKey() -> Foundation.Data
  public func getAcsUrl() -> Swift.String
  public func setAcsPublicKey(acsPublicKey: Foundation.Data)
  public func setSdkPublicKey(sdkPublicKey: Foundation.Data)
  public func setAcsUrl(acsUrl: Swift.String)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class MultiSelectFragment : UIKit.UIView {
  public func setListener(listener: SDK3DS.MultiSelectListener)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SingleSelectFragment : UIKit.UIView {
  public func setListener(listener: SDK3DS.SingleSelectListener)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol MultiSelectListener {
  func callbackMultiSelect(text: Swift.String)
}
@_hasMissingDesignatedInitializers public class CResValidator {
  @objc deinit
}
extension UIColor {
  convenience public init?(hex: Swift.String)
}
extension SecCertificate {
  public static func create(derEncodedFile file: Swift.String) -> Security.SecCertificate?
  public static func createFromData(data: Foundation.Data) -> Security.SecCertificate?
  public var data: Foundation.Data {
    get
  }
  public var publicKey: Security.SecKey? {
    get
  }
}
public protocol ImageDownloaderListener {
  func callbackGetImage(bitmap: UIKit.UIImage?)
}
public enum SDK3DSError : Swift.Error {
  case InvalidInputException(Swift.String)
  case SDKAlreadyInitializedException(Swift.String)
  case SDKNotInitializedException(Swift.String)
  case SDKRuntimeException(Swift.String)
}
@_hasMissingDesignatedInitializers public class SDKCResException : Swift.Error {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CResDecryptionException : SDK3DS.SDKCResException {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CResFieldRequiredException : SDK3DS.SDKCResException {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CResFieldValidationException : SDK3DS.SDKCResException {
  @objc deinit
}
public protocol OOBListener {
  func callbackOOB(oobContinue: Swift.Bool)
  func refreshText()
}
@_inheritsConvenienceInitializers open class ToolbarCustomization : SDK3DS.Customization {
  override public init()
  public func setBackgroundColor(hexColorCode: Swift.String) throws
  public func setHeaderText(headerText: Swift.String) throws
  public func setButtonText(buttonText: Swift.String) throws
  public func getBackgroundColor() -> Swift.String
  public func getHeaderText() -> Swift.String
  public func getButtonText() -> Swift.String
  @objc deinit
}
public class TransactionImpl : SDK3DS.Transaction {
  required public init()
  public var challengeService: SDK3DS.ChallengeService?
  public var authRequestParameters: SDK3DS.AuthenticationRequestParameters?
  public var acsUrl: Swift.String?
  public var challengeStatusReceiver: SDK3DS.ChallengeStatusReceiver?
  public var challengeParameters: SDK3DS.ChallengeParameters?
  public func getAuthenticationRequestParameters() -> SDK3DS.AuthenticationRequestParameters
  public func setAuthenticationRequestParameters(parameters: SDK3DS.AuthenticationRequestParameters)
  public func doChallenge(challengeParameters: SDK3DS.ChallengeParameters, challengeStatusReceiver: SDK3DS.ChallengeStatusReceiver, timeout: Swift.Int) throws
  public func doChallenge(_ applicationContext: SDK3DS.Ctx?, challengeParameters: SDK3DS.ChallengeParameters, challengeStatusReceiver: SDK3DS.ChallengeStatusReceiver, timeout: Swift.Int) throws
  public func getProgressView(_ applicationContext: UIKit.UIViewController?) throws -> SDK3DS.ProgressView
  public func close() throws
  @objc deinit
}
public protocol Ctx {
}
open class ErrorMessage : Swift.Codable {
  public init(transactionID: Swift.String, errorCode: Swift.String, errorDescription: Swift.String, errorDetail: Swift.String)
  public func getTransactionID() -> Swift.String
  public func getErrorCode() -> Swift.String
  public func getErrorDescription() -> Swift.String
  public func getErrorDetails() -> Swift.String
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class SecurityManager {
  public static func put(acsTransId: Swift.String, cekSdk: Foundation.Data)
  public static func get(acsTransId: Swift.String) -> Foundation.Data
  public static func getPublicKey() -> Foundation.Data
  public static func setKeyPair(keyPair: SDK3DS.SeglanKeyPair)
  public static func getSharedSecret(theirKey: Foundation.Data) -> Foundation.Data
  public static func getSharedSecretTest() -> Foundation.Data
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SeglanKeyPair {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TextFragment : UIKit.UIView {
  public func setListener(listener: SDK3DS.TextListener)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum Severity {
  case LOW
  case MEDIUM
  case HIGH
  public static func == (a: SDK3DS.Severity, b: SDK3DS.Severity) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class ACSDataAuthenticationDeserializer {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ECKey : Swift.Codable {
  public func getKey() -> Foundation.Data
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers open class LabelCustomization : SDK3DS.Customization {
  override public init()
  public func setHeadingTextFontName(fontName: Swift.String) throws
  public func setHeadingTextColor(hexColorCode: Swift.String) throws
  public func setHeadingTextFontSize(fontSize: Swift.Int) throws
  public func getHeadingTextFontName() -> Swift.String
  public func getHeadingTextColor() -> Swift.String
  public func getHeadingTextFontSize() -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Image : Swift.Codable {
  public func getMedium() -> Swift.String
  public func setMedium(medium: Swift.String)
  public func getHigh() -> Swift.String
  public func setHigh(high: Swift.String)
  public func getExtraHigh() -> Swift.String
  public func setExtraHigh(extraHigh: Swift.String)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class Crypto {
  public static func generateJWK(key: Foundation.Data) -> Swift.String
  public static func calculateCRC(string: Swift.String) -> Swift.String
  @objc deinit
}
public struct CResStrings : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers open class SwKeyStore {
  public enum SecError : Darwin.OSStatus, Swift.Error {
    case unimplemented
    case param
    case allocate
    case notAvailable
    case authFailed
    case duplicateItem
    case itemNotFound
    case interactionNotAllowed
    case decode
    case missingEntitlement
    public static var debugLevel: Swift.Int
    public typealias RawValue = Darwin.OSStatus
    public init?(rawValue: Darwin.OSStatus)
    public var rawValue: Darwin.OSStatus {
      get
    }
  }
  public static func upsertKey(_ pemKey: Swift.String, keyTag: Swift.String, options: [Foundation.NSString : Swift.AnyObject] = [:]) throws
  public static func getKey(_ keyTag: Swift.String) throws -> Swift.String
  public static func delKey(_ keyTag: Swift.String) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SwKeyConvert {
  public enum SwError : Swift.Error {
    case invalidKey
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
    public static func == (a: SDK3DS.SwKeyConvert.SwError, b: SDK3DS.SwKeyConvert.SwError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public typealias EncMode = SDK3DS.PEM.EncryptedPrivateKey.EncMode
    public static func encryptPEM(_ pemKey: Swift.String, passphrase: Swift.String, mode: SDK3DS.SwKeyConvert.PrivateKey.EncMode) throws -> Swift.String
    public static func decryptPEM(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func pemToPKCS8DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public static func derToPKCS8PEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PKCS8 {
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func addHeader(_ derKey: Foundation.Data) -> Foundation.Data
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PEM {
  public enum SwError : Swift.Error {
    case parse(Swift.String)
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EncryptedPrivateKey {
    public enum EncMode {
      case aes128CBC, aes256CBC
      public static func == (a: SDK3DS.PEM.EncryptedPrivateKey.EncMode, b: SDK3DS.PEM.EncryptedPrivateKey.EncMode) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public static func toDER(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data, passphrase: Swift.String, mode: SDK3DS.PEM.EncryptedPrivateKey.EncMode) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CC {
  public typealias CCCryptorStatus = Swift.Int32
  public enum CCError : SDK3DS.CC.CCCryptorStatus, Swift.Error {
    case paramError
    case bufferTooSmall
    case memoryFailure
    case alignmentError
    case decodeError
    case unimplemented
    case overflow
    case rngFailure
    case unspecifiedError
    case callSequenceError
    case keySizeError
    case invalidKey
    public static var debugLevel: Swift.Int
    public typealias RawValue = SDK3DS.CC.CCCryptorStatus
    public init?(rawValue: SDK3DS.CC.CCCryptorStatus)
    public var rawValue: SDK3DS.CC.CCCryptorStatus {
      get
    }
  }
  public static func generateRandom(_ size: Swift.Int) -> Foundation.Data
  public typealias CCDigestAlgorithm = Swift.UInt32
  public enum DigestAlgorithm : SDK3DS.CC.CCDigestAlgorithm {
    case none
    case md5
    case rmd128, rmd160, rmd256, rmd320
    case sha1
    case sha224, sha256, sha384, sha512
    public typealias RawValue = SDK3DS.CC.CCDigestAlgorithm
    public init?(rawValue: SDK3DS.CC.CCDigestAlgorithm)
    public var rawValue: SDK3DS.CC.CCDigestAlgorithm {
      get
    }
  }
  public static func digest(_ data: Foundation.Data, alg: SDK3DS.CC.DigestAlgorithm) -> Foundation.Data
  public typealias CCHmacAlgorithm = Swift.UInt32
  public enum HMACAlg : SDK3DS.CC.CCHmacAlgorithm {
    case sha1, md5, sha256, sha384, sha512, sha224
    public typealias RawValue = SDK3DS.CC.CCHmacAlgorithm
    public init?(rawValue: SDK3DS.CC.CCHmacAlgorithm)
    public var rawValue: SDK3DS.CC.CCHmacAlgorithm {
      get
    }
  }
  public static func HMAC(_ data: Foundation.Data, alg: SDK3DS.CC.HMACAlg, key: Foundation.Data) -> Foundation.Data
  public typealias CCOperation = Swift.UInt32
  public enum OpMode : SDK3DS.CC.CCOperation {
    case encrypt, decrypt
    public typealias RawValue = SDK3DS.CC.CCOperation
    public init?(rawValue: SDK3DS.CC.CCOperation)
    public var rawValue: SDK3DS.CC.CCOperation {
      get
    }
  }
  public typealias CCMode = Swift.UInt32
  public enum BlockMode : SDK3DS.CC.CCMode {
    case ecb, cbc, cfb, ctr, f8, lrw, ofb, xts, rc4, cfb8
    public typealias RawValue = SDK3DS.CC.CCMode
    public init?(rawValue: SDK3DS.CC.CCMode)
    public var rawValue: SDK3DS.CC.CCMode {
      get
    }
  }
  public enum AuthBlockMode : SDK3DS.CC.CCMode {
    case gcm, ccm
    public typealias RawValue = SDK3DS.CC.CCMode
    public init?(rawValue: SDK3DS.CC.CCMode)
    public var rawValue: SDK3DS.CC.CCMode {
      get
    }
  }
  public typealias CCAlgorithm = Swift.UInt32
  public enum Algorithm : SDK3DS.CC.CCAlgorithm {
    case aes, des, threeDES, cast, rc4, rc2, blowfish
    public typealias RawValue = SDK3DS.CC.CCAlgorithm
    public init?(rawValue: SDK3DS.CC.CCAlgorithm)
    public var rawValue: SDK3DS.CC.CCAlgorithm {
      get
    }
  }
  public typealias CCPadding = Swift.UInt32
  public enum Padding : SDK3DS.CC.CCPadding {
    case noPadding, pkcs7Padding
    public typealias RawValue = SDK3DS.CC.CCPadding
    public init?(rawValue: SDK3DS.CC.CCPadding)
    public var rawValue: SDK3DS.CC.CCPadding {
      get
    }
  }
  public static func crypt(_ opMode: SDK3DS.CC.OpMode, blockMode: SDK3DS.CC.BlockMode, algorithm: SDK3DS.CC.Algorithm, padding: SDK3DS.CC.Padding, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data) throws -> Foundation.Data
  public static func cryptAuth(_ opMode: SDK3DS.CC.OpMode, blockMode: SDK3DS.CC.AuthBlockMode, algorithm: SDK3DS.CC.Algorithm, data: Foundation.Data, aData: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, tagLength: Swift.Int) throws -> Foundation.Data
  public static func digestAvailable() -> Swift.Bool
  public static func randomAvailable() -> Swift.Bool
  public static func hmacAvailable() -> Swift.Bool
  public static func cryptorAvailable() -> Swift.Bool
  public static func available() -> Swift.Bool
  @_hasMissingDesignatedInitializers open class GCM {
    public static func crypt(_ opMode: SDK3DS.CC.OpMode, algorithm: SDK3DS.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CCM {
    public static func crypt(_ opMode: SDK3DS.CC.OpMode, algorithm: SDK3DS.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class RSA {
    public typealias CCAsymmetricPadding = Swift.UInt32
    public enum AsymmetricPadding : SDK3DS.CC.RSA.CCAsymmetricPadding {
      case pkcs1
      case oaep
      public typealias RawValue = SDK3DS.CC.RSA.CCAsymmetricPadding
      public init?(rawValue: SDK3DS.CC.RSA.CCAsymmetricPadding)
      public var rawValue: SDK3DS.CC.RSA.CCAsymmetricPadding {
        get
      }
    }
    public enum AsymmetricSAPadding : Swift.UInt32 {
      case pkcs15
      case pss
      public typealias RawValue = Swift.UInt32
      public init?(rawValue: Swift.UInt32)
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func generateKeyPair(_ keySize: Swift.Int = 4096) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ derKey: Foundation.Data) throws -> Foundation.Data
    public static func encrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: SDK3DS.CC.RSA.AsymmetricPadding, digest: SDK3DS.CC.DigestAlgorithm) throws -> Foundation.Data
    public static func decrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: SDK3DS.CC.RSA.AsymmetricPadding, digest: SDK3DS.CC.DigestAlgorithm) throws -> (Foundation.Data, Swift.Int)
    public static func sign(_ message: Foundation.Data, derKey: Foundation.Data, padding: SDK3DS.CC.RSA.AsymmetricSAPadding, digest: SDK3DS.CC.DigestAlgorithm, saltLen: Swift.Int) throws -> Foundation.Data
    public static func verify(_ message: Foundation.Data, derKey: Foundation.Data, padding: SDK3DS.CC.RSA.AsymmetricSAPadding, digest: SDK3DS.CC.DigestAlgorithm, saltLen: Swift.Int, signedData: Foundation.Data) throws -> Swift.Bool
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class DH {
    public enum DHParam {
      case rfc3526Group5
      case rfc2409Group2
      public static func == (a: SDK3DS.CC.DH.DHParam, b: SDK3DS.CC.DH.DHParam) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    open class DH {
      public init(dhParam: SDK3DS.CC.DH.DHParam) throws
      open func generateKey() throws -> Foundation.Data
      open func computeKey(_ peerKey: Foundation.Data) throws -> Foundation.Data
      @objc deinit
    }
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EC {
    public static func generateKeyPair(_ keySize: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ privateKey: Foundation.Data) throws -> Foundation.Data
    public static func signHash(_ privateKey: Foundation.Data, hash: Foundation.Data) throws -> Foundation.Data
    public static func verifyHash(_ publicKey: Foundation.Data, hash: Foundation.Data, signedData: Foundation.Data) throws -> Swift.Bool
    public static func computeSharedSecret(_ privateKey: Foundation.Data, publicKey: Foundation.Data) throws -> Foundation.Data
    public struct KeyComponents {
      public init(_ keySize: Swift.Int, _ x: Foundation.Data, _ y: Foundation.Data, _ d: Foundation.Data)
      public var keySize: Swift.Int
      public var x: Foundation.Data
      public var y: Foundation.Data
      public var d: Foundation.Data
    }
    public static func getPublicKeyComponents(_ keyData: Foundation.Data) throws -> SDK3DS.CC.EC.KeyComponents
    public static func getPrivateKeyComponents(_ keyData: Foundation.Data) throws -> SDK3DS.CC.EC.KeyComponents
    public static func createFromData(_ keySize: Darwin.size_t, _ x: Foundation.Data, _ y: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CRC {
    public typealias CNcrc = Swift.UInt32
    public enum Mode : SDK3DS.CC.CRC.CNcrc {
      case crc8, crc8ICODE, crc8ITU, crc8ROHC, crc8WCDMA, crc16, crc16CCITTTrue, crc16CCITTFalse, crc16USB, crc16XMODEM, crc16DECTR, crc16DECTX, crc16ICODE, crc16VERIFONE, crc16A, crc16B, crc16Fletcher, crc32Adler, crc32, crc32CASTAGNOLI, crc32BZIP2, crc32MPEG2, crc32POSIX, crc32XFER, crc64ECMA182
      public typealias RawValue = SDK3DS.CC.CRC.CNcrc
      public init?(rawValue: SDK3DS.CC.CRC.CNcrc)
      public var rawValue: SDK3DS.CC.CRC.CNcrc {
        get
      }
    }
    public static func crc(_ input: Foundation.Data, mode: SDK3DS.CC.CRC.Mode) throws -> Swift.UInt64
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CMAC {
    public static func AESCMAC(_ data: Foundation.Data, key: Foundation.Data) -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyDerivation {
    public typealias CCPseudoRandomAlgorithm = Swift.UInt32
    public enum PRFAlg : SDK3DS.CC.KeyDerivation.CCPseudoRandomAlgorithm {
      case sha1, sha224, sha256, sha384, sha512
      public typealias RawValue = SDK3DS.CC.KeyDerivation.CCPseudoRandomAlgorithm
      public init?(rawValue: SDK3DS.CC.KeyDerivation.CCPseudoRandomAlgorithm)
      public var rawValue: SDK3DS.CC.KeyDerivation.CCPseudoRandomAlgorithm {
        get
      }
    }
    public static func PBKDF2(_ password: Swift.String, salt: Foundation.Data, prf: SDK3DS.CC.KeyDerivation.PRFAlg, rounds: Swift.UInt32) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyWrap {
    public static let rfc3394IV: Foundation.Data
    public static func SymmetricKeyWrap(_ iv: Foundation.Data, kek: Foundation.Data, rawKey: Foundation.Data) throws -> Foundation.Data
    public static func SymmetricKeyUnwrap(_ iv: Foundation.Data, kek: Foundation.Data, wrappedKey: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
extension Data {
  public func hexadecimalString() -> Swift.String
  public func arrayOfBytes() -> [Swift.UInt8]
}
extension String {
  public func dataFromHexadecimalString() -> Foundation.Data?
}
@objc @_inheritsConvenienceInitializers public class HeaderFragment : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func hideCancel(hide: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DeviceRequest : Swift.Codable {
  public func getVersion() -> Swift.String
  public func setVersion(version: Swift.String)
  public func getDevice() -> SDK3DS.SDKDeviceInfo
  public func setDevice(device: SDK3DS.SDKDeviceInfo)
  public func getNotAvailable() -> [Swift.String : Swift.String]
  public func setNotAvailable(notAvailable: [Swift.String : Swift.String])
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers open class ButtonCustomization : SDK3DS.Customization {
  override public init()
  public func setBackgroundColor(hexColorCode: Swift.String) throws
  public func setCornerRadius(cornerRadius: Swift.Int) throws
  public func getBackgroundColor() -> Swift.String
  public func getCornerRadius() -> Swift.Int
  @objc deinit
}
open class ProgressView {
  public init()
  public func show()
  public func close()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChallengeService {
  public var cReq: SDK3DS.CReq?
  public var cRes: SDK3DS.CRes?
  public static var cancelledByUser: Swift.Bool
  public static func getInstance() -> SDK3DS.ChallengeService
  public func getCounter() -> Swift.Int
  public static func initialize(acsUrl: Swift.String, authReq: SDK3DS.AuthenticationRequestParameters, challengeParameters: SDK3DS.ChallengeParameters, receiver: SDK3DS.ChallengeStatusReceiver, timeout: Swift.Int) -> SDK3DS.ChallengeService
  public func getcReq() -> SDK3DS.CReq
  public func getcRes() -> SDK3DS.CRes
  public static func cleanInstance()
  public func setCallback(callback: SDK3DS.IChallengeCallback)
  public func incrementCounter()
  public func initChallenge()
  public func challengeTimedOut()
  public func sendChallengeRequest() throws
  public func cancelChallenge()
  public func challengeTimeout()
  @objc deinit
}
public protocol IChallengeCallback {
  func callbackCResReceived(acsUiTypeEnum: SDK3DS.UITypeEnumValue)
  func callbackCResFinished()
}
open class AuthenticationRequestParameters {
  public var deviceData: Swift.String
  public var sdkTransactionID: Swift.String
  public var sdkAppID: Swift.String
  public var sdkReferenceNumber: Swift.String
  public var sdkEphemeralPublicKey: Swift.String
  public var messageVersion: Swift.String
  public init()
  public func initialize(sdkTransactionID: Swift.String, deviceData: Swift.String, sdkEphemeralPublicKey: Swift.String, sdkAppID: Swift.String, sdkReferenceNumber: Swift.String, messageVersion: Swift.String) throws
  public func getDeviceData() -> Swift.String
  public func getSDKTransactionID() -> Swift.String
  public func getSDKAppID() -> Swift.String
  public func getSDKReferenceNumber() -> Swift.String
  public func getSDKEphemeralPublicKey() -> Swift.String
  public func getMessageVersion() -> Swift.String
  @objc deinit
}
public protocol ThreeDS2Service {
  func initialize(uiViewController: UIKit.UIViewController, configParameters: SDK3DS.ConfigParameters, locale: Swift.String?, uiCustomization: SDK3DS.UiCustomization?) throws
  func createTransaction(directoryServerID: Swift.String, messageVersion: Swift.String?) throws -> SDK3DS.Transaction
  func cleanUp() throws
  func getSDKVersion() throws -> Swift.String
  func getWarnings() -> [SDK3DS.Warning]
}
@_hasMissingDesignatedInitializers public class BuildConfig {
  public static let VERSION: Swift.String
  public static let DEBUG_LOGGER_ENABLED: Swift.Bool
  public static var ENCRYPT_DEVICE_INFO: Swift.Bool
  public static let TEST_CRYPTO: Swift.Bool
  public static let UL_ENVIRONMENT: Swift.Bool
  public static let API_URL: Swift.String
  public static let STATE_REFRESH_UI: Swift.String
  public static let urlAuthorize: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SDKDeviceInfo : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class CReq : Swift.Codable {
  public func setChallengeDataEntry(text: Swift.String)
  public func setChallengeHTMLDataEntry(text: Swift.String)
  public func setOobContinue(oobContinue: Swift.Bool)
  public func setChallengeCancel(cause: SDK3DS.ChallengeCancelEnumValue)
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CRes : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers open class TextBoxCustomization : SDK3DS.Customization {
  override public init()
  public func setBorderWidth(borderWidth: Swift.Int) throws
  public func setBorderColor(hexColorCode: Swift.String) throws
  public func setCornerRadius(cornerRadius: Swift.Int) throws
  public func getBorderWidth() -> Swift.Int
  public func getBorderColor() -> Swift.String
  public func getCornerRadius() -> Swift.Int
  @objc deinit
}
public protocol Transaction {
  func getAuthenticationRequestParameters() -> SDK3DS.AuthenticationRequestParameters
  func doChallenge(_ applicationContext: SDK3DS.Ctx?, challengeParameters: SDK3DS.ChallengeParameters, challengeStatusReceiver: SDK3DS.ChallengeStatusReceiver, timeout: Swift.Int) throws
  func doChallenge(challengeParameters: SDK3DS.ChallengeParameters, challengeStatusReceiver: SDK3DS.ChallengeStatusReceiver, timeout: Swift.Int) throws
  func getProgressView(_ applicationContext: UIKit.UIViewController?) throws -> SDK3DS.ProgressView
  func close() throws
}
@_hasMissingDesignatedInitializers public class CEKSdk {
  @objc deinit
}
public protocol SDKNativeUIActivityCallback {
  func callbackText(text: Swift.String)
  func callbackSingleSelect(text: Swift.String)
  func callbackMultiSelect(text: Swift.String)
  func callbackOOB(oobContinue: Swift.Bool)
  func callbackHtml(text: Swift.String)
  func callbackCancel(cancel: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class ChallengeNotification {
  public static func getInstance() -> SDK3DS.ChallengeNotification
  public static func getClearInstance() -> SDK3DS.ChallengeNotification
  public func setListener(callback: SDK3DS.SDKNativeUIActivityCallback)
  public func setCRes(cRes: SDK3DS.CRes)
  public func getCRes() -> SDK3DS.CRes
  public func getCallback() -> SDK3DS.SDKNativeUIActivityCallback
  @objc deinit
}
public enum ChallengeCancelEnumValue : Swift.String, Swift.Codable {
  case CANCELED_BY_CARDHOLDER
  case CH_CANCEL_AND_CONTINUE
  case REQUESTOR_CANCELLED
  case TX_TIMED_OUT_AT_ACS
  case TX_ERROR
  case UNKNOWN
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum UITypeEnumValue : Swift.String, Swift.Codable {
  case TEXT
  case SINGLE_SELECT
  case MULTI_SELECT
  case OOB
  case HTML
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct MessageExtension : Swift.Codable {
  public var name: Swift.String?
  public var id: Swift.String?
  public var criticalityIndicator: Swift.Bool?
  public var data: [Swift.String : Swift.String]
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol SingleSelectListener {
  func callbackSingleSelect(text: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class SDKNativeUIActivity : UIKit.UIView, SDK3DS.TextListener, SDK3DS.OOBListener, SDK3DS.HTMLListener, SDK3DS.SingleSelectListener, SDK3DS.MultiSelectListener, SDK3DS.IChallengeCallback, UIKit.UIWebViewDelegate {
  public func callbackCResReceived(acsUiTypeEnum: SDK3DS.UITypeEnumValue)
  public func refreshHTML()
  public func callbackHTML(text: Swift.String)
  public func callbackCResFinished()
  public func callbackText(text: Swift.String)
  public func callbackOOB(oobContinue: Swift.Bool)
  public func refreshText()
  public func callbackMultiSelect(text: Swift.String)
  public func callbackSingleSelect(text: Swift.String)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func setAsProgress()
  public func nativeActivityIndicator(show: Swift.Bool)
  @objc public func webView(_ webView: UIKit.UIWebView, shouldStartLoadWith request: Foundation.URLRequest, navigationType: UIKit.UIWebView.NavigationType) -> Swift.Bool
  @objc public func webViewDidStartLoad(_ webView: UIKit.UIWebView)
  @objc public func webViewDidFinishLoad(_ webView: UIKit.UIWebView)
  @objc deinit
}
open class UiCustomization {
  public init()
  public func setButtonCustomization(buttonCustomization: SDK3DS.ButtonCustomization, buttonType: SDK3DS.ButtonType) throws
  public func setToolbarCustomization(toolbarCustomization: SDK3DS.ToolbarCustomization) throws
  public func setLabelCustomization(labelCustomization: SDK3DS.LabelCustomization) throws
  public func setTextBoxCustomization(textBoxCustomization: SDK3DS.TextBoxCustomization) throws
  public func getButtonCustomization() throws -> SDK3DS.ButtonCustomization
  public func getToolbarCustomization() throws -> SDK3DS.ToolbarCustomization
  public func getLabelCustomization() throws -> SDK3DS.LabelCustomization
  public func getTextBoxCustomization() throws -> SDK3DS.TextBoxCustomization
  @objc deinit
}
public class Warning {
  public init(id: Swift.String, message: Swift.String, severity: SDK3DS.Severity)
  public func getMessage() -> Swift.String
  public func getID() -> Swift.String
  public func getSeverity() -> SDK3DS.Severity
  public func setMessage(message: Swift.String)
  public func setID(id: Swift.String)
  public func setSeverity(severity: SDK3DS.Severity)
  @objc deinit
}
open class ChallengeParameters {
  public init()
  public var threeDSServerTransactionID: Swift.String
  public var acsTransactionID: Swift.String
  public var acsRefNumber: Swift.String
  public var acsSignedContent: Swift.String
  public func set3DSServerTransactionID(_ transactionID: Swift.String)
  public func setAcsTransactionID(_ transactionID: Swift.String)
  public func setAcsRefNumber(_ refNumber: Swift.String)
  public func setAcsSignedContent(_ signedContent: Swift.String)
  public func get3DSServerTransactionID() -> Swift.String
  public func getAcsTransactionID() -> Swift.String
  public func getAcsRefNumber() -> Swift.String
  public func getAcsSignedContent() -> Swift.String
  @objc deinit
}
extension SDK3DS.ButtonType : Swift.Equatable {}
extension SDK3DS.ButtonType : Swift.Hashable {}
extension SDK3DS.ButtonType : Swift.RawRepresentable {}
extension SDK3DS.AcsUiTypeEnum : Swift.Equatable {}
extension SDK3DS.AcsUiTypeEnum : Swift.Hashable {}
extension SDK3DS.AcsUiTypeEnum : Swift.RawRepresentable {}
extension SDK3DS.Severity : Swift.Equatable {}
extension SDK3DS.Severity : Swift.Hashable {}
extension SDK3DS.SwKeyStore.SecError : Swift.Equatable {}
extension SDK3DS.SwKeyStore.SecError : Swift.Hashable {}
extension SDK3DS.SwKeyStore.SecError : Swift.RawRepresentable {}
extension SDK3DS.SwKeyConvert.SwError : Swift.Equatable {}
extension SDK3DS.SwKeyConvert.SwError : Swift.Hashable {}
extension SDK3DS.PEM.EncryptedPrivateKey.EncMode : Swift.Equatable {}
extension SDK3DS.PEM.EncryptedPrivateKey.EncMode : Swift.Hashable {}
extension SDK3DS.CC.CCError : Swift.Equatable {}
extension SDK3DS.CC.CCError : Swift.Hashable {}
extension SDK3DS.CC.CCError : Swift.RawRepresentable {}
extension SDK3DS.CC.DigestAlgorithm : Swift.Equatable {}
extension SDK3DS.CC.DigestAlgorithm : Swift.Hashable {}
extension SDK3DS.CC.DigestAlgorithm : Swift.RawRepresentable {}
extension SDK3DS.CC.HMACAlg : Swift.Equatable {}
extension SDK3DS.CC.HMACAlg : Swift.Hashable {}
extension SDK3DS.CC.HMACAlg : Swift.RawRepresentable {}
extension SDK3DS.CC.OpMode : Swift.Equatable {}
extension SDK3DS.CC.OpMode : Swift.Hashable {}
extension SDK3DS.CC.OpMode : Swift.RawRepresentable {}
extension SDK3DS.CC.BlockMode : Swift.Equatable {}
extension SDK3DS.CC.BlockMode : Swift.Hashable {}
extension SDK3DS.CC.BlockMode : Swift.RawRepresentable {}
extension SDK3DS.CC.AuthBlockMode : Swift.Equatable {}
extension SDK3DS.CC.AuthBlockMode : Swift.Hashable {}
extension SDK3DS.CC.AuthBlockMode : Swift.RawRepresentable {}
extension SDK3DS.CC.Algorithm : Swift.Equatable {}
extension SDK3DS.CC.Algorithm : Swift.Hashable {}
extension SDK3DS.CC.Algorithm : Swift.RawRepresentable {}
extension SDK3DS.CC.Padding : Swift.Equatable {}
extension SDK3DS.CC.Padding : Swift.Hashable {}
extension SDK3DS.CC.Padding : Swift.RawRepresentable {}
extension SDK3DS.CC.RSA.AsymmetricPadding : Swift.Equatable {}
extension SDK3DS.CC.RSA.AsymmetricPadding : Swift.Hashable {}
extension SDK3DS.CC.RSA.AsymmetricPadding : Swift.RawRepresentable {}
extension SDK3DS.CC.RSA.AsymmetricSAPadding : Swift.Equatable {}
extension SDK3DS.CC.RSA.AsymmetricSAPadding : Swift.Hashable {}
extension SDK3DS.CC.RSA.AsymmetricSAPadding : Swift.RawRepresentable {}
extension SDK3DS.CC.DH.DHParam : Swift.Equatable {}
extension SDK3DS.CC.DH.DHParam : Swift.Hashable {}
extension SDK3DS.CC.CRC.Mode : Swift.Equatable {}
extension SDK3DS.CC.CRC.Mode : Swift.Hashable {}
extension SDK3DS.CC.CRC.Mode : Swift.RawRepresentable {}
extension SDK3DS.CC.KeyDerivation.PRFAlg : Swift.Equatable {}
extension SDK3DS.CC.KeyDerivation.PRFAlg : Swift.Hashable {}
extension SDK3DS.CC.KeyDerivation.PRFAlg : Swift.RawRepresentable {}
extension SDK3DS.ChallengeCancelEnumValue : Swift.Equatable {}
extension SDK3DS.ChallengeCancelEnumValue : Swift.Hashable {}
extension SDK3DS.ChallengeCancelEnumValue : Swift.RawRepresentable {}
extension SDK3DS.UITypeEnumValue : Swift.Equatable {}
extension SDK3DS.UITypeEnumValue : Swift.Hashable {}
extension SDK3DS.UITypeEnumValue : Swift.RawRepresentable {}
